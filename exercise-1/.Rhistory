# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "New Delhi"
# Assign your name to the variable `my_name`
my_name <- "Naman Mehra"
# Assign your height (in inches) to a variable `my_height`
my_height <- 70
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 200
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost = puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 %% puppy_price
max_puppies <- 1000 %% puppy_price
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "New Delhi"
# Assign your name to the variable `my_name`
my_name <- "Naman Mehra"
# Assign your height (in inches) to a variable `my_height`
my_height <- 70
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 200
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 %% puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 100
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "New Delhi"
# Assign your name to the variable `my_name`
my_name <- "Naman Mehra"
# Assign your height (in inches) to a variable `my_height`
my_height <- 70
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 200
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 %/% puppy_price
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "New Delhi"
# Assign your name to the variable `my_name`
my_name <- "Naman Mehra"
# Assign your height (in inches) to a variable `my_height`
my_height <- 70
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 250
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / puppy_price
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "New Delhi"
# Assign your name to the variable `my_name`
my_name <- "Naman Mehra"
# Assign your height (in inches) to a variable `my_height`
my_height <- 70
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 300
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / puppy_price
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "New Delhi"
# Assign your name to the variable `my_name`
my_name <- "Naman Mehra"
# Assign your height (in inches) to a variable `my_height`
my_height <- 70
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 300
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 %/% puppy_price
my_name <- "Naman"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(x = my_name)
# Exercise 1: calling built-in functions
# Create a variable `my_name` that contains your name
my_name <- "Naman"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
# Print the number of letters in your name
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
# Make the `now_doing` variable upper case
### Bonus
# Pick two of your favorite numbers (between 1 and 100) and assign them to
# variables `fav_1` and `fav_2`
# Divide each number by the square root of 201 and save the new value in the
# original variable
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
# Create a variable `sum_round` that is the sum of the rounded values
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
# Print the number of letters in your name
print(name_length)
max_puppies <- floor(1000/total_cost)
rm(max_puppies)
max_puppies <- floor(1000/total_cost)
now_doing <- paste(my_name, " is programming!")
now_doing <- toupper(now_doing)
fav_1 <- 5
fav_2 <- 25
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1 / sqrt(201)
fav_2 <- fav_2 / sqrt(201)
raw_sum <- sum(fav_1, fav_2)
round_sum <- round(raw_sum, 1)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <- round(fav_1, 1)
round_2 <- round(fav_2, 1)
sum_round <- sum(round_1, round_2)
bigger_sum <- max(sum_round, round_sum)
if(sum_round > round_sum) {
print("sum_round")
}else if(round_sum > sum_round) {
print("round_sum")
}else {
print("they are the same")
}
install.packages("stringr")
numbers <- function(a, b) {
a + b
}
numbers(1,2)
numbers <- function(a, b) {
print(a + b)
}
numbers(1,2)
numbers <- function(a, b) {
a + b
}
numbers <- function(a, b) {
a + b
b - a
}
numbers(2, 2)
lyric <- "I like to eat apples and bananas"
intro <- substr(lyric, 1, 14)
fruits <- substr(lyric, 15, nchar(lyric))
intro <- substr(lyrics, 1, 13)
fruits_e <- gsub(x = lyric, pattern = "a", replacement = "ee")
fruits_o <- gsub(x = lyric, pattern = "a", replacement = "o")
lyric_e <- paste(intro, fruits_e)
fruits_o <- gsub(x = fruits, pattern = "a", replacement = "o")
lyric_e <- paste(intro, fruits_e)
fruits_e <- gsub(x = fruits, pattern = "a", replacement = "ee")
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub(x = fruits, pattern = "a", replacement = "o")
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
print(intro + fruits_o)
print(paste(intro, fruits_o))
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyrics, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 14, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub(x = fruits, pattern = "a", replacement = "ee")
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub(x = fruits, pattern = "a", replacement = "o")
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyrics, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub(x = fruits, pattern = "a", replacement = "ee")
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub(x = fruits, pattern = "a", replacement = "o")
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
intro <- substr(lyrics, 1, 12)
intro <- substr(lyrics, 1, 12)
print(paste(intro, fruits_o))
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyrics, 1, 12)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub(x = fruits, pattern = "a", replacement = "ee")
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub(x = fruits, pattern = "a", replacement = "o")
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
intro <- substr(lyrics, 1, 11)
intro <- substr(lyric, 1, 12)
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub(x = fruits, pattern = "a", replacement = "ee")
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub(x = fruits, pattern = "a", replacement = "o")
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(a) {
a + 3
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- function() {
add_three(7)
}
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
tot <- inches + (feet * 12)
tot / 0.0254
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 10)
tot <- inches + (feet * 12)
imperial_to_metric(4, 10)
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(a) {
a + 3
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- function() {
add_three(7)
}
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
tot <- inches + (feet * 12)
tot * 0.0254
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 10)
is_twice_as_long <- function(a, b) {
nchar(a) >= nchar(b) * 2
}
is_twice_as_long("asdf", "as")
is_twice_as_long("as", "as")
describe_difference <- function(a, b) {
if(nchar(a) > nchar(b)) {
print(paste("Your first string is longer by ", nchar(a) - nchar(b), " characters"))
}
}
describe_difference("asf", "a")
describe_difference <- function(a, b) {
if(nchar(a) > nchar(b)) {
print(paste("Your first string is longer by ", nchar(a) - nchar(b), " characters"))
}else if(nchar(b) > nchar(b)) {
print(paste("Your second string is longer by ", nchar(b) - nchar(a), " characters"))
}else {
print("Your strings are the same length!")
}
}
describe_difference("asdf", "asdfasdf")
> describe_difference("asdf", "asdfasdf")
describe_difference("asdf", "asdfasdf")
describe_difference("asasdfasdfasdf", "asdfasdf")
describe_difference("asdf", "asdfdf")
describe_difference <- function(a, b) {
if(nchar(a) > nchar(b)) {
print(paste("Your first string is longer by ", nchar(a) - nchar(b), " characters"))
}else if (nchar(b) > nchar(b)) {
print(paste("Your second string is longer by ", nchar(b) - nchar(a), " characters"))
}else {
print("Your strings are the same length!")
}
}
describe_difference("asdf", "asdfasdf")
describe_difference <- function(a, b) {
if(nchar(a) > nchar(b)) {
print(paste("Your first string is longer by ", nchar(a) - nchar(b), " characters"))
}else if (nchar(b) > nchar(a)) {
print(paste("Your second string is longer by ", nchar(b) - nchar(a), " characters"))
}else {
print("Your strings are the same length!")
}
}
describe_difference("asdf", "asdfasdf")
# Exercise 4: functions and conditionals
# Define a function `is_twice_as_long` that takes in two character strings, and
# returns whether or not (e.g., a boolean) the length of one argument is greater
# than or equal to twice the length of the other.
# Hint: compare the length difference to the length of the smaller string
is_twice_as_long <- function(a, b) {
nchar(a) >= nchar(b) * 2
}
# Call your `is_twice_as_long` function by passing it different length strings
# to confirm that it works. Make sure to check when _either_ argument is twice
# as long, as well as when neither are!
# Define a function `describe_difference` that takes in two strings. The
# function should return one of the following sentences as appropriate
#   "Your first string is longer by N characters"
#   "Your second string is longer by N characters"
#   "Your strings are the same length!"
describe_difference <- function(a, b) {
if(nchar(a) > nchar(b)) {
print(paste("Your first string is longer by", nchar(a) - nchar(b), "characters"))
}else if (nchar(b) > nchar(a)) {
print(paste("Your second string is longer by", nchar(b) - nchar(a), "characters"))
}else {
print("Your strings are the same length!")
}
}
# Call your `describe_difference` function by passing it different length strings
# to confirm that it works. Make sure to check all 3 conditions1
describe_difference("asdf", "asdfasdf")
